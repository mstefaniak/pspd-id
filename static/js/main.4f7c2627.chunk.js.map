{"version":3,"sources":["images/logo.png","lib/api.ts","sign-in.tsx","card.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["API_URL","getToken","username","password","a","fetch","method","body","JSON","stringify","headers","response","json","data","token","login","credentials","isLogged","status","getUser","user","length","SignIn","onSuccess","useState","email","setEmail","pass","setPass","error","setError","handleSubmit","event","preventDefault","className","src","logo","alt","onSubmit","type","name","value","htmlFor","onChange","target","id","autoComplete","required","placeholder","Card","firstName","lastName","joinDate","isActive","Intl","DateTimeFormat","format","Number","App","setUser","userData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","toString","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4f7c2627.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.860f766d.png\";","import { User } from '../types'\n\nconst API_URL = 'https://crm-test.pspd.org.pl/api'\n\ninterface TokenResponse {\n  token: string\n}\n\ninterface LoginResponse {\n  sessid: string;\n  token: string;\n  session_name: string;\n}\n\ninterface LoginReturn {\n  isLogged: boolean\n  token: string\n}\n\nconst getToken = async (username: string, password: string) => {\n  const response = await fetch(`${API_URL}/user/token`, {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  })\n\n  const data = await response.json() as TokenResponse\n\n  return data.token\n}\n\nconst login = async (username: string, password: string): Promise<LoginReturn> => {\n  const token = await getToken(username, password)\n\n  const response = await fetch(`${API_URL}/user/login`, {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': token,\n    },\n  })\n\n  const data = (await response.json()) as LoginResponse\n\n  return {\n    isLogged: response.status < 400,\n    token: data?.token ?? '',\n  }\n}\n\nconst getUser = async (username: string, password: string): Promise<User | false> => {\n  const { isLogged, token } = await login(username, password)\n\n  if (!isLogged) {\n    return false\n  }\n\n  const response = await fetch(`${API_URL}/data/userdata`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': token,\n    },\n  })\n\n  // TODO: handle errors\n\n  const user = await response.json()\n\n  if (user && user.length) {\n    return user[0] as User\n  }\n\n  return false\n}\n\nexport { getUser }\n","import { SyntheticEvent, ChangeEvent, useState } from 'react'\nimport logo from './images/logo.png'\nimport { User } from './types'\nimport { getUser } from './lib/api'\n\ninterface ISignInProps {\n  onSuccess: (user: User) => void\n}\n\nconst SignIn = ({ onSuccess }: ISignInProps): JSX.Element => {\n  const [email, setEmail] = useState<string>()\n  const [pass, setPass] = useState<string>()\n  const [error, setError] = useState<boolean>(false)\n\n  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value)\n  }\n\n  const handlePassChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setPass(event.target.value)\n  }\n\n  const handleSubmit = async (event: SyntheticEvent) => {\n    event.preventDefault()\n\n    if (pass && email) {\n      const user = await getUser(email, pass)\n      if (user) {\n        onSuccess(user)\n      } else {\n        setError(true)\n      }\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-start justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <img src={logo} alt=\"logo\" className=\"-mb-20 -mt-10\" />\n          <h2 className=\"text-center text-2xl font-extrabold text-gray-900\">\n            LEGITYMACJA\n          </h2>\n        </div>\n        {error && (\n          <div className=\"bg-red-200 text-red-600 p-4 text-center rounded\">\n            Niepoprawny email i/lub hasło\n          </div>\n        )}\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <input type=\"hidden\" name=\"remember\" value=\"true\" />\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email\n              </label>\n              <input\n                value={email}\n                onChange={handleEmailChange}\n                id=\"email-address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Hasło\n              </label>\n              <input\n                value={pass}\n                onChange={handlePassChange}\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Hasło\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            >\n              Zaloguj\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport { SignIn }\n","import { User } from './types'\n\nimport logo from './images/logo.png'\n\nconst Card = ({ firstName, lastName, id, status, joinDate }: User): JSX.Element => {\n  const isActive = status === 'Current'\n\n  return (\n    <div className=\"sm:min-h-screen sm:flex sm:items-start sm:justify-center sm:bg-gray-50 sm:py-12\">\n      <div className=\"sm:max-w-lg sm:shadow bg-white overflow-hidden sm:rounded-lg\">\n        <div className=\"px-4 py-1 sm:px-6 grid grid-cols-2\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900 flex items-center\">\n            Legitymacja\n          </h3>\n          <div className=\"flex justify-end\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n        </div>\n        <div className=\"border-t border-gray-200\">\n          <dl>\n            <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">\n                Imię i nazwisko\n              </dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {firstName} {lastName}\n              </dd>\n            </div>\n            <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">Numer</dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {id}\n              </dd>\n            </div>\n            <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">\n                Składka opłacona\n              </dt>\n              <dd className=\"mt-1 text-sm text-green-600 sm:mt-0 sm:col-span-2\">\n                <span className={isActive ? 'text-green-600' : 'text-red-600'}>\n                  {isActive ? 'TAK' : 'NIE'}\n                </span>\n              </dd>\n            </div>\n            <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n              <dt className=\"text-sm font-medium text-gray-500\">\n                Data przystąpienia\n              </dt>\n              <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                {new Intl.DateTimeFormat().format(Number(joinDate) * 1000)}\n              </dd>\n            </div>\n          </dl>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { Card }\n","import { useState } from 'react'\nimport './App.css'\nimport { SignIn } from './sign-in'\nimport { Card } from './card'\nimport { User } from './types'\n\nconst App = (): JSX.Element => {\n  const [user, setUser] = useState<User>()\n\n  const handleSuccess = (userData: User) => {\n    setUser(userData)\n  }\n\n  if (user) {\n    return <Card {...user} />\n  }\n\n  return (\n    <SignIn onSuccess={handleSuccess} />\n  )\n}\n\nexport { App }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport default function register(): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response?.headers?.get('content-type')?.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport registerServiceWorker from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\nregisterServiceWorker()\n"],"sourceRoot":""}