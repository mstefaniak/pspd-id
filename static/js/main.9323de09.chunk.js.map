{"version":3,"sources":["images/logo.png","lib/const.ts","lib/api.ts","loading.tsx","sign-in.tsx","not-active.tsx","card-line.tsx","card.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["LOCALE","API_URL","getToken","username","password","a","fetch","method","body","JSON","stringify","headers","response","json","data","token","login","credentials","sessionStorage","setItem","status","getUser","fetchUserData","getItem","console","error","user","length","Date","now","toString","Loading","className","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","SignIn","onSuccess","useState","isLoading","setIsLoading","email","setEmail","pass","setPass","setError","handleSubmit","event","preventDefault","src","logo","alt","onSubmit","type","name","value","htmlFor","onChange","target","id","autoComplete","required","placeholder","NotActive","role","CardLine","label","isEven","Card","firstName","lastName","joinDate","ot","currentTimestamp","setCurrentTimestamp","isActive","fullName","lastUpdateTimestamp","Number","isOutdated","useEffect","interval","setInterval","clearInterval","lastUpdate","Intl","DateTimeFormat","year","month","day","hour","minute","format","App","setUser","init","useCallback","userData","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9323de09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.860f766d.png\";","export const LOCALE = 'pl-PL'\nexport const API_URL = 'https://crm-test.pspd.org.pl/api'\nexport const OUTDATE_DIFF = 1000 * 60 * 60 * 8 // 8 godzin","import { User } from '../types'\nimport { API_URL } from './const'\n\ninterface TokenResponse {\n  token: string\n}\n\ninterface LoginResponse {\n  sessid: string;\n  token: string;\n  session_name: string;\n}\n\nconst getToken = async (username: string, password: string) => {\n  const response = await fetch(`${API_URL}/user/token`, {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n  })\n\n  const data = await response.json() as TokenResponse\n\n  return data?.token\n}\n\nconst login = async (username: string, password: string): Promise<boolean> => {\n  const token = await getToken(username, password)\n\n  const response = await fetch(`${API_URL}/user/login`, {\n    method: 'POST',\n    body: JSON.stringify({ username, password }),\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': token,\n    },\n  })\n\n  const data = (await response.json()) as LoginResponse\n\n  sessionStorage.setItem('token', data?.token)\n\n  return response.status < 400\n}\n\nconst getUser = async (username: string, password: string): Promise<User | null> => {\n  const isLogged = await login(username, password)\n\n  if (!isLogged) {\n    return null\n  }\n\n  return fetchUserData()\n}\n\nexport const fetchUserData = async (): Promise<User | null> => {\n  const token = sessionStorage.getItem('token')\n\n  if (!token) {\n    console.error('Token not found')\n    return null\n  }\n\n  const response = await fetch(`${API_URL}/data/userdata`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': token,\n    },\n  })\n\n  if (response.status >= 400) {\n    return null\n  }\n\n  const user = await response.json()\n\n  if (user && user.length) {\n    sessionStorage.setItem('lastUpdate', Date.now().toString())\n    \n    return user[0] as User\n  }\n\n  return null\n}\n\nexport { getUser }\n","export const Loading = (): JSX.Element => {\n  return (\n    <div className=\"sm:min-h-screen sm:flex sm:items-start sm:justify-center sm:bg-gray-50 sm:py-12\">\n      <svg className=\"animate-spin h-10 w-10 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"#000\" strokeWidth=\"4\"></circle>\n        <path className=\"opacity-75\" fill=\"#000\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n    </div>\n  )\n}","import { SyntheticEvent, ChangeEvent, useState } from 'react'\nimport logo from './images/logo.png'\nimport { User } from './types'\nimport { getUser } from './lib/api'\nimport { Loading } from './loading'\n\ninterface ISignInProps {\n  onSuccess: (user: User) => void\n}\n\nconst SignIn = ({ onSuccess }: ISignInProps): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [email, setEmail] = useState<string>()\n  const [pass, setPass] = useState<string>()\n  const [error, setError] = useState<boolean>(false)\n\n  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value)\n  }\n\n  const handlePassChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setPass(event.target.value)\n  }\n\n  const handleSubmit = async (event: SyntheticEvent) => {\n    event.preventDefault()\n\n    if (pass && email) {\n      setIsLoading(true)\n      const user = await getUser(email, pass)\n      if (user) {\n        onSuccess(user)\n      } else {\n        setError(true)\n      }\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return <Loading />\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-start justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <img src={logo} alt=\"logo\" className=\"-mb-20 -mt-10\" />\n          <h2 className=\"text-center text-2xl font-extrabold text-gray-900\">\n            LEGITYMACJA\n          </h2>\n        </div>\n        {error && (\n          <div className=\"bg-red-200 text-red-600 p-4 text-center rounded\">\n            Niepoprawny email i/lub hasło\n          </div>\n        )}\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <input type=\"hidden\" name=\"remember\" value=\"true\" />\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email\n              </label>\n              <input\n                value={email}\n                onChange={handleEmailChange}\n                id=\"email-address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Hasło\n              </label>\n              <input\n                value={pass}\n                onChange={handlePassChange}\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Hasło\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n            >\n              Zaloguj\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport { SignIn }\n","export const NotActive = (): JSX.Element => {\n  return (\n    <div className=\"sm:min-h-screen sm:flex sm:items-start sm:justify-center sm:bg-gray-50 sm:py-12\">\n      <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">    \n        Legitymacja nieaktywna\n      </div>\n    </div>\n  )\n}","interface Props {\n  label: string\n  value: string | number | React.ReactNode\n  isEven?: boolean\n}\n\nexport const CardLine = ({ label, value, isEven = false }: Props): JSX.Element => {\n  const className = `${isEven ? 'bg-gray-50' : 'bg-white'} px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6`\n\n  return (\n    <div className={className}>\n      <dt className=\"text-sm font-medium text-gray-500\">\n        {label}\n      </dt>\n      <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n        {value}\n      </dd>\n    </div>\n  )\n}","import { User } from './types'\nimport { NotActive } from './not-active'\nimport { CardLine } from './card-line'\nimport { LOCALE, OUTDATE_DIFF } from './lib/const'\n\nimport logo from './images/logo.png'\nimport { useEffect, useState } from 'react'\n\nconst Card = ({ firstName, lastName, id, status, joinDate, ot }: User): JSX.Element => {\n  const [currentTimestamp, setCurrentTimestamp] = useState(Date.now())\n  const isActive = status === 'Current'\n  const fullName = `${firstName} ${lastName}`\n  const lastUpdateTimestamp = Number(sessionStorage.getItem('lastUpdate'))\n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric', month: 'numeric', day: 'numeric',\n    hour: 'numeric', minute: 'numeric',\n  }\n  const isOutdated = currentTimestamp - lastUpdateTimestamp > OUTDATE_DIFF\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTimestamp(Date.now())\n    }, 30 * 1000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  const lastUpdate = new Intl.DateTimeFormat(LOCALE, options).format(lastUpdateTimestamp)\n\n  if (!isActive) {\n    return <NotActive />\n  }\n\n  return (\n    <div className=\"sm:min-h-screen sm:flex sm:items-start sm:justify-center sm:bg-gray-50 sm:py-12\">\n      <div className=\"sm:max-w-lg sm:shadow bg-white overflow-hidden sm:rounded-lg\">\n        <div className=\"px-4 py-1 sm:px-6 grid grid-cols-2\">\n          <h3 className=\"text-lg leading-6 font-medium text-gray-900 flex items-center\">\n            Legitymacja\n          </h3>\n          <div className=\"flex justify-end\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n        </div>\n        <div className=\"border-t border-gray-200\">\n          <dl>\n            <CardLine\n              label=\"Imię i nazwisko\" \n              value={<span className=\"font-bold\">{fullName}</span>} \n              isEven \n            />\n            <CardLine \n              label=\"Numer\" \n              value={id} \n            />\n            <CardLine \n              label=\"Składka opłacona\" \n              value={<span className=\"text-green-600 font-bold\">TAK</span>} \n              isEven \n            />\n            <CardLine \n              label=\"Data przystąpienia\" \n              value={new Intl.DateTimeFormat(LOCALE).format(Number(joinDate) * 1000)} \n            />\n            <CardLine\n              label=\"Oddział\"\n              value={ot}\n              isEven\n            />\n            <CardLine\n              label=\"Ostatnia aktualizacja\"\n              value={<span className={isOutdated ? 'text-red-600 font-bold' : ''}>{lastUpdate}</span>}\n            />\n          </dl>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { Card }\n","import { useEffect, useCallback, useState } from 'react'\nimport './App.css'\nimport { SignIn } from './sign-in'\nimport { Card } from './card'\nimport { User } from './types'\nimport { fetchUserData } from './lib/api'\nimport { Loading } from './loading'\n\nconst App = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [user, setUser] = useState<User>()\n\n  const init = useCallback(async () => {\n    const userData = await fetchUserData()\n    if (userData) {\n      setUser(userData)\n    }\n  }, [fetchUserData])\n\n  useEffect(() => {\n    init().then(() => setIsLoading(false))\n  }, [init])\n\n  const handleSuccess = (userData: User) => {\n    setUser(userData)\n  }\n\n  if (isLoading) {\n    return <Loading />\n  }\n\n  if (user) {\n    return <Card {...user} />\n  }\n\n  return (\n    <SignIn onSuccess={handleSuccess} />\n  )\n}\n\nexport { App }\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport default function register(): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response?.headers?.get('content-type')?.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport registerServiceWorker from './serviceWorkerRegistration'\n\nif (process.env.NODE_ENV === 'development') {\n  // eslint-disable-next-line\n  const { worker } = require('./mocks/browser')\n  worker.start()\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\nregisterServiceWorker()\n"],"sourceRoot":""}